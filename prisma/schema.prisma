// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String @id @default(uuid())
  name        String
  companions  Companion[]
}

model Companion {
  id             String @id @default(uuid())
  userId         String
  userName       String
  src            String
  name           String @db.Text
  description    String
  instructions   String @db.Text
  seed           String @db.Text

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  category       Category @relation(fields: [categoryId], references: [id])
  categoryId     String
  messages       Message[]
  personalityTraits PersonalityTrait[]

  @@index([categoryId])
  @@index([userId])
}

enum Role {
  user 
  system
}

model Message {
  id           String @id @default(uuid())
  role         Role
  content      String @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  companionId  String
  userId       String

  companion    Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)
  
  @@index([companionId])
  @@index([userId])
  @@index([createdAt])
}

// prisma/schema.prisma
model UserApiKey {
  id        String   @id @default(uuid())
  userId    String
  name      String
  key       String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime?

  @@index([userId])
}

model PersonalityTrait {
  id          String   @id @default(uuid())
  companionId String
  userId      String
  type        String   // interest, opinion, behavior, etc.
  content     String   @db.Text
  confidence  Float    // 0-1 indicating confidence
  source      String?  @db.Text // source conversation 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  companion   Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)

  @@index([companionId])
  @@index([userId])
  @@index([type])
}

model TrainingFeedback {
  id          String   @id @default(uuid())
  messageId   String
  feedback    String   
  accuracy    Float    // 0-1 rating of accuracy
  userId      String
  createdAt   DateTime @default(now())

  @@index([messageId])
  @@index([userId])
}